Flask-FlatEarth
===============

Generates pages based on static text files. Currently only tested on Python 3. Requires flask and markdown. Intended to be used with Frozen-Flask

Usage
-----

Not packaged yet, but if imported it defaults to looking for a directory named "pages" in the working directory when called. Requires:

* flask
  The Flask code base. While intended to be used with Frozen-Flask, it is not a dependency, and using flask.Flask.run() works fine for testing.

* markdown
  This is required for the generator. Currently tested with 2.6.9 and 2.6.11.

Using the markdown generator in the a subfolder from the cwd::

    from flask import Flask
    from flask_flatearth.markdown import MarkdownGenerator
    app = Flask(__name__)
    app.config.update(SERVER_NAME="localhost:8080") # Needed for url_for references
    mdg = MarkdownGenerator(app) # Flask has no routes at this point
    mdg.generate() # Flask now has routes and view functions
    app.run(host="localhost",port=8080) # Must match SERVER_NAME for links to work

This will read through all .md files in a folder named 'pages' by default, and use those to generate files. For a comparable Frozen_Flask example with a default configuration defining SERVER_NAME::

    from flask import Flask
    from flask_frozen import Freezer
    from flask_flatearth.markdown import MarkdownGenerator
    from myconfig import debugconf
    app = Flask(__name__)
    app.config.from_object(debugconf)
    mdg = MarkdownGenerator(app)
    freezer = Freezer(app)
    mdg.generate()
    freezer.freeze()

Configuration
-------------

The following configurations actually do something, and are read in from the Flask app config.

* FLATEARTH_SEARCH_PATH - Overrides default content files search path $CWD/pages
* FLATEARTH_EXTENSION - Overrides default content files extension .md
* FLATEARTH_LOGLEVEL - The default log level for the 'flask-flatearth' logger

Page types
----------

There are various page types, and some paths automatically generated. They can be defined by the metadata included in the pages.

* Articles
* Authors
* Topics

Authors
~~~~~~~

These pages define author/bio pages. An example file::

    type: author
    slug: jcastillo2nd
    author-name: Javier
    author-long: Javier Castillo II
    social-twitter: @jcastillo2nd
    
    
    # About Me #
    
    What can I say? Hey, I like Linux!

Articles
~~~~~~~~

These pages define content and topics. The articles support using a markdown extension to link to other pages. An example file::

    type: article
    slug: example
    topics: hello world,examples,simple
    title: An Example Page
    description: A basic page to showcase simple functionality
    author: jcastillo2nd
    publish: Fri, May 25 2018 04:23:00 GMT+1000
    updates: Fri, May 25 2018 07:13:00 GMT+1000: There was a typo
    
    ## An Example Article ##
    
    This is better than lorem ipsum. Don't you think?
    
    ### Example Article Subsection ###
    
    This could have been something more. But it's not.
    
    I tried though.
    
    ### The Final Section for Example Article ###
    
    One last note. I can still use links based on slugs to an [author]{{jcastillo2nd}} or any other page including [this one]{{example}}.
    
    ## Finally ##
    
    That was it for the example.

Templates
---------

The content rendering will search for specific template files. The layout/inheritence is entirely up to the developer. There is context data that is automatically available with each template as well as integration to support url_for handling within the Markdown content.


Required Files
~~~~~~~~~~~~~~
The templates require the following files:

* author.html
  A template page for the author content
* article.html
  A template page for the article content
* topic.html
  A listing page for articles associated with a listing
* topics.html
  A listing page for topic pages

Available Context
~~~~~~~~~~~~~~~~~

The following variables are available within the Context of a template:

* page_content
  This is the html rendered from the markdown. It is unprocessed, so the `{{url_for(item)}}` strings generated by the markdown must be filtered with `markdown_render`.

* authors
  This is a list of all content authors ( author pages ) by author slug keys. This allows for all author content to be available to each template.

* refs
  This is a list of references passed to a Page object. This primarily used for articles associated with authors or topics.

* meta
  This is a dictionary of markdown metadata. This commonly includes the following entries:

  * type
    The page type ( article, author, topic )::
        type: article

  * slug
    The endpoint/function name for flask to reference with `url_for()`::
        slug: article-name

  * topics
    The topics associated with the article ( list )::
        topics: testing,documentation entry,readme

  * title
    The page title::
        title: Article Name

  * description
    The page description::
        description:: This is an article

  * author
    The authors associated with the page ( list )::
        author: authorslug1
        author: authorslug2

  * publish
    The date the page was originally published::
        publish: Fri, May 25 2018 04:23:00 GMT+1000

  * updates
    RFC 2822 date for recent edit and reason for edit::
        updates: Sat, Apr 12 2014 12:22:00 GMT+1000: Updated to reflect new spec
        updates: Sun, May 27 2018 06:03:00 GMT+1000: Updated to reflect deprecated status

Any other metadata included in the article markdowns will be available as well.

Pages
-----

The collection of content to be generated should be kept to a single directory. By default, this directory is named "pages" and searched for in the current working directory from where the generator command is called from. The current supported file format is markdown. While the directory organization is completely up to the user, the recommended outline would be::

    pages/
    ├── articles
    │   ├── article-group-1
    │   │   └── article-1.md
    │   └── article-group-2
    │       ├── article-2.md
    │       └── article-3.md
    ├── authors
    │   ├── author1.md
    │   └── author2.md
    ├── coming-soon.md
    ├── example.md
    └── index.md

All content in the pages directory will be processed, and any pages of 'author' type will have slugs available for use with the authors listing.

Future Work
-----------

Some todo items include:

* Extension Interface
  Provide an extension interface into the flask_flatearth project. Some of the other TODO items may directly benefit from this type of architecture.

* AuthorListingPage
  This ContentPage object would be used to list all the others and require an `authors.html` template.

* Site map
  This would generate a sitemap XML file.

* Atom Feed
  This would generate an atom feed for the site.

* RSS Feed
  This would generate an rss feed for the site.

* reST generator
  A Generator capable of reading reST files.

Update the module and package this as an actual Flask extension ( including setup.py ).
